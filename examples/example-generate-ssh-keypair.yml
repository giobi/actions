name: Generate SSH Key Pair Example

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      private_key_name:
        description: 'Private key secret name (default: SSH_PRIVATE)'
        required: false
        default: 'SSH_PRIVATE'
        type: string
      public_key_name:
        description: 'Public key variable name (default: SSH_PUBLIC)'
        required: false
        default: 'SSH_PUBLIC'
        type: string
      key_type:
        description: 'SSH key type'
        required: false
        default: 'rsa'
        type: choice
        options:
          - rsa
          - ed25519
          - ecdsa
      key_bits:
        description: 'Key bits (for RSA keys)'
        required: false
        default: '4096'
        type: choice
        options:
          - '2048'
          - '4096'

jobs:
  # Example 1: Basic usage with defaults
  generate-default-keys:
    uses: giobi/actions/.github/workflows/generate-ssh-keypair.yml@main

  # Example 2: Custom key names
  generate-custom-named-keys:
    uses: giobi/actions/.github/workflows/generate-ssh-keypair.yml@main
    with:
      private_key_secret_name: "DEPLOY_SSH_PRIVATE"
      public_key_var_name: "DEPLOY_SSH_PUBLIC"
      key_comment: "deploy key for production server"

  # Example 3: ED25519 key generation
  generate-ed25519-keys:
    uses: giobi/actions/.github/workflows/generate-ssh-keypair.yml@main
    with:
      private_key_secret_name: "ED25519_SSH_PRIVATE"
      public_key_var_name: "ED25519_SSH_PUBLIC"
      key_type: "ed25519"
      key_comment: "ed25519 key for secure deployment"

  # Example 4: Using workflow inputs
  generate-input-configured-keys:
    uses: giobi/actions/.github/workflows/generate-ssh-keypair.yml@main
    with:
      private_key_secret_name: ${{ github.event.inputs.private_key_name }}
      public_key_var_name: ${{ github.event.inputs.public_key_name }}
      key_type: ${{ github.event.inputs.key_type }}
      key_bits: ${{ fromJSON(github.event.inputs.key_bits) }}

  # Example 5: Using outputs from key generation
  use-generated-keys:
    needs: generate-default-keys
    runs-on: ubuntu-latest
    steps:
      - name: Display generated key information
        run: |
          echo "Private key secret name: ${{ needs.generate-default-keys.outputs.private_key_name }}"
          echo "Public key variable name: ${{ needs.generate-default-keys.outputs.public_key_name }}"
          echo "Key fingerprint: ${{ needs.generate-default-keys.outputs.key_fingerprint }}"
          echo "Generation successful: ${{ needs.generate-default-keys.outputs.success }}"

  # Example 6: SSH deployment workflow using generated keys
  deploy-with-generated-keys:
    needs: generate-custom-named-keys
    if: needs.generate-custom-named-keys.outputs.success == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy using generated SSH key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.DEPLOY_HOST }}
          username: ${{ vars.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_PRIVATE }}  # This was generated by the workflow
          port: ${{ vars.DEPLOY_PORT || 22 }}
          script: |
            echo "Deploying with generated SSH key..."
            echo "Public key fingerprint: ${{ needs.generate-custom-named-keys.outputs.key_fingerprint }}"
            # Add your deployment commands here