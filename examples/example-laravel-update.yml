---
name: Laravel Application Update Example

# This example shows how to use the reusable Laravel update workflow
# to execute comprehensive Laravel deployment commands on remote servers

on:
  # Manual trigger with input options
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        type: environment
      git_repo:
        description: "Git repository URL (default: current repo)"
        required: false
        type: string
      git_branch:
        description: "Git branch to deploy (default: main)"
        required: false
        default: "main"
        type: string

  # Automatic trigger (example: after deployment)
  # workflow_run:
  #   workflows: ["Deploy to Production"]
  #   types: [completed]

jobs:
  # Example 1: Basic update with manual inputs
  update-application:
    uses: giobi/actions/.github/workflows/laravel-update.yml@main
    with:
      git_repo: ${{ github.event.inputs.git_repo || github.repository }}
      git_branch: ${{ github.event.inputs.git_branch || 'main' }}
      environment: ${{ github.event.inputs.environment }}
      ssh_host: ${{ vars.SSH_HOST }}  # Use repository variable
      ssh_user: ${{ vars.SSH_USER }}  # Use repository variable
      ssh_port: ${{ vars.SSH_PORT || '22' }}  # Use repository variable with fallback
      project_path: ${{ vars.PROJECT_PATH }}  # Use repository variable
      webserver_user: ${{ vars.WEBSERVER_USER || 'www-data' }}
      webserver_group: ${{ vars.WEBSERVER_GROUP || 'www-data' }}
      force: true  # Always use force mode (equivalent to --force flag)
    secrets:
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

  # Example 2: Multiple environments with different configurations
  update-staging:
    if: github.event.inputs.environment == 'staging' || github.event_name == 'workflow_run'
    uses: giobi/actions/.github/workflows/laravel-update.yml@main
    with:
      git_repo: "https://github.com/mycompany/myapp.git"
      git_branch: "develop"
      environment: "staging"
      ssh_host: "staging.myapp.com"
      ssh_user: "deploy"
      ssh_port: "22"
      project_path: "/var/www/staging"
      webserver_user: "www-data"
      webserver_group: "www-data"
      force: true
    secrets:
      SSH_PRIVATE_KEY: ${{ secrets.STAGING_SSH_KEY }}

  update-production:
    if: github.event.inputs.environment == 'production'
    uses: giobi/actions/.github/workflows/laravel-update.yml@main
    with:
      git_repo: "https://github.com/mycompany/myapp.git"
      git_branch: "main"
      environment: "production"
      ssh_host: "prod.myapp.com"
      ssh_user: "deploy"
      ssh_port: "2222"
      project_path: "/var/www/html"
      webserver_user: "www-data" 
      webserver_group: "www-data"
      force: true
    secrets:
      SSH_PRIVATE_KEY: ${{ secrets.PRODUCTION_SSH_KEY }}

  # Example 3: Chain updates with output checking
  verify-update:
    needs: [update-application]
    if: needs.update-application.outputs.update_status == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Verify Update Success
        run: |
          echo "Update completed successfully!"
          echo "Release timestamp: ${{ needs.update-application.outputs.release_timestamp }}"
          echo "Project path: ${{ needs.update-application.outputs.project_path_used }}"
          echo "Status: ${{ needs.update-application.outputs.update_status }}"

  # Example 4: Notify on failure
  notify-failure:
    needs: [update-application]
    if: failure() && needs.update-application.outputs.update_status == 'failure'
    runs-on: ubuntu-latest
    steps:
      - name: Send Failure Notification
        run: |
          echo "Laravel deployment failed!"
          echo "Release timestamp: ${{ needs.update-application.outputs.release_timestamp }}"
          echo "Project path: ${{ needs.update-application.outputs.project_path_used }}"
          # Add your notification logic here (Slack, email, etc.)

  # Example 5: Custom webserver user/group
  update-with-custom-permissions:
    if: false  # Disabled by default, enable as needed
    uses: giobi/actions/.github/workflows/laravel-update.yml@main
    with:
      git_repo: "https://github.com/mycompany/myapp.git"
      git_branch: "main"
      environment: "production"
      ssh_host: "custom.myapp.com"
      ssh_user: "deploy"
      project_path: "/opt/myapp"
      webserver_user: "nginx"     # Custom webserver user
      webserver_group: "nginx"    # Custom webserver group
      force: true
    secrets:
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}