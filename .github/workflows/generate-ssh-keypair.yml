---
name: Generate SSH Key Pair

"on":
  workflow_call:
    inputs:
      private_key_secret_name:
        description: "Name for the private key secret (default: SSH_PRIVATE)"
        required: false
        default: "SSH_PRIVATE"
        type: string
      public_key_var_name:
        description: "Name for the public key variable (default: SSH_PUBLIC)" 
        required: false
        default: "SSH_PUBLIC"
        type: string
      key_type:
        description: "SSH key type (default: rsa)"
        required: false
        default: "rsa"
        type: string
      key_bits:
        description: "SSH key bits for RSA keys (default: 4096)"
        required: false
        default: 4096
        type: number
      key_comment:
        description: "Comment for the SSH key (default: generated by GitHub Actions)"
        required: false
        default: "generated by GitHub Actions"
        type: string
    outputs:
      private_key_name:
        description: "Name of the private key secret that was created"
        value: ${{ jobs.generate-keypair.outputs.private_key_name }}
      public_key_name:
        description: "Name of the public key variable that was created"
        value: ${{ jobs.generate-keypair.outputs.public_key_name }}
      key_fingerprint:
        description: "SSH key fingerprint"
        value: ${{ jobs.generate-keypair.outputs.key_fingerprint }}
      success:
        description: "Whether the key generation and storage was successful"
        value: ${{ jobs.generate-keypair.outputs.success }}

jobs:
  generate-keypair:
    runs-on: ubuntu-latest
    outputs:
      private_key_name: ${{ steps.generate.outputs.private_key_name }}
      public_key_name: ${{ steps.generate.outputs.public_key_name }}
      key_fingerprint: ${{ steps.generate.outputs.key_fingerprint }}
      success: ${{ steps.generate.outputs.success }}
    
    steps:
      - name: Install Python dependencies for encryption
        run: |
          pip install PyNaCl

      - name: Create encryption script
        run: |
          cat > /tmp/encrypt_secret.py << 'EOF'
          import base64
          import sys
          from nacl import encoding, public

          def encrypt_secret(public_key_b64, secret_value):
              """Encrypt a Unicode string using the public key."""
              public_key = public.PublicKey(public_key_b64.encode("utf-8"), encoder=encoding.Base64Encoder())
              sealed_box = public.SealedBox(public_key)
              encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
              return base64.b64encode(encrypted).decode("utf-8")

          if __name__ == "__main__":
              public_key = sys.argv[1]
              secret = sys.stdin.read()
              result = encrypt_secret(public_key, secret)
              print(result)
          EOF

      - name: Generate SSH Key Pair and Store in Secrets/Variables
        id: generate
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            // Input parameters
            const privateKeyName = '${{ inputs.private_key_secret_name }}';
            const publicKeyName = '${{ inputs.public_key_var_name }}';
            const keyType = '${{ inputs.key_type }}';
            const keyBits = ${{ inputs.key_bits }};
            const keyComment = '${{ inputs.key_comment }}';
            
            console.log(`Generating SSH key pair...`);
            console.log(`Private key secret name: ${privateKeyName}`);
            console.log(`Public key variable name: ${publicKeyName}`);
            console.log(`Key type: ${keyType}`);
            console.log(`Key bits: ${keyBits}`);
            console.log(`Key comment: ${keyComment}`);
            
            try {
              // Generate temporary file paths
              const privateKeyPath = '/tmp/ssh_key';
              const publicKeyPath = '/tmp/ssh_key.pub';
              
              // Generate SSH key pair
              let sshKeygenCmd = `ssh-keygen -t ${keyType} -f ${privateKeyPath} -N "" -C "${keyComment}"`;
              if (keyType === 'rsa') {
                sshKeygenCmd = `ssh-keygen -t ${keyType} -b ${keyBits} -f ${privateKeyPath} -N "" -C "${keyComment}"`;
              }
              
              console.log('Executing ssh-keygen...');
              execSync(sshKeygenCmd, { stdio: 'inherit' });
              
              // Read generated keys
              const privateKey = fs.readFileSync(privateKeyPath, 'utf8');
              const publicKey = fs.readFileSync(publicKeyPath, 'utf8').trim();
              
              // Generate key fingerprint
              const fingerprintCmd = `ssh-keygen -lf ${publicKeyPath}`;
              const fingerprintOutput = execSync(fingerprintCmd, { encoding: 'utf8' });
              const fingerprint = fingerprintOutput.trim().split(' ')[1]; // Extract the fingerprint part
              
              console.log(`Generated key fingerprint: ${fingerprint}`);
              
              // Get repository info
              const { owner, repo } = context.repo;
              
              // Store private key as repository secret
              console.log(`Storing private key as secret: ${privateKeyName}`);
              
              // Get repository public key for encryption
              const { data: repoPublicKey } = await github.rest.actions.getRepoPublicKey({
                owner,
                repo
              });
              
              // Encrypt the private key using the Python script
              const encryptedValue = execSync(
                `echo '${privateKey}' | python /tmp/encrypt_secret.py "${repoPublicKey.key}"`,
                { encoding: 'utf8' }
              ).trim();
              
              // Create/update the repository secret
              await github.rest.actions.createOrUpdateRepoSecret({
                owner,
                repo,
                secret_name: privateKeyName,
                encrypted_value: encryptedValue,
                key_id: repoPublicKey.key_id
              });
              
              console.log(`Successfully stored private key as secret: ${privateKeyName}`);
              
              // Store public key as repository variable
              console.log(`Storing public key as variable: ${publicKeyName}`);
              
              try {
                await github.rest.actions.createRepoVariable({
                  owner,
                  repo,
                  name: publicKeyName,
                  value: publicKey
                });
                console.log(`Successfully created new variable: ${publicKeyName}`);
              } catch (error) {
                if (error.status === 409) {
                  // Variable already exists, update it
                  console.log(`Variable ${publicKeyName} already exists, updating it...`);
                  await github.rest.actions.updateRepoVariable({
                    owner,
                    repo,
                    name: publicKeyName,
                    value: publicKey
                  });
                  console.log(`Successfully updated variable: ${publicKeyName}`);
                } else {
                  throw error;
                }
              }
              
              // Clean up temporary files
              fs.unlinkSync(privateKeyPath);
              fs.unlinkSync(publicKeyPath);
              
              // Set outputs
              core.setOutput('private_key_name', privateKeyName);
              core.setOutput('public_key_name', publicKeyName);
              core.setOutput('key_fingerprint', fingerprint);
              core.setOutput('success', 'true');
              
              console.log('SSH key pair generation completed successfully!');
              console.log(`Private key stored in secret: ${privateKeyName}`);
              console.log(`Public key stored in variable: ${publicKeyName}`);
              console.log(`Key fingerprint: ${fingerprint}`);
              
            } catch (error) {
              console.error('Error generating SSH key pair:', error);
              core.setOutput('success', 'false');
              core.setFailed(error.message);
            }