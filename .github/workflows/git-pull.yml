name: Reusable Generic Git Pull

"on":
  workflow_call:
    inputs:
      branch:
        description: "Branch to pull (default: main)"
        required: false
        default: "main"
        type: string
      run_post_commands:
        description: "Run post-pull commands"
        required: false
        default: false
        type: boolean
      post_commands:
        description: "Custom post-pull commands to run (separated by newlines)"
        required: false
        default: ""
        type: string
      environment:
        description: "Target environment for deployment"
        required: true
        type: string
    secrets:
      SSHPRIVATE:
        description: "SSH private key for server access"
        required: true
      USERHOST:
        description: "SSH connection string in format: user@host.domain.com:port/path/to/project (port and path optional)"
        required: true
      SSHPUBLIC:
        description: "SSH public key (optional, for verification purposes)"
        required: false
    outputs:
      deployment_status:
        description: "Status of the deployment (success/failure)"
        value: ${{ jobs.deploy.outputs.deployment_status }}
      branch_deployed:
        description: "Branch that was deployed"
        value: ${{ jobs.deploy.outputs.branch_deployed }}
      post_commands_run:
        description: "Whether post-deployment commands were executed"
        value: ${{ jobs.deploy.outputs.post_commands_run }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      deployment_status: ${{ steps.deploy.outputs.deployment_status }}
      branch_deployed: ${{ steps.deploy.outputs.branch_deployed }}
      post_commands_run: ${{ steps.deploy.outputs.post_commands_run }}

    steps:
      - name: Parse USERHOST variable
        id: parse_userhost
        run: |
          # Parse USERHOST format: user@host.domain.com:port/path/to/project
          USERHOST="${{ secrets.USERHOST }}"
          echo "Parsing USERHOST: $USERHOST"
          
          # Extract user@host part (everything before optional :port or /path)
          USER_HOST=$(echo "$USERHOST" | sed 's/:.*$//' | sed 's/\/.*$//')
          
          # Extract user and host
          SSH_USER=$(echo "$USER_HOST" | cut -d'@' -f1)
          SSH_HOST=$(echo "$USER_HOST" | cut -d'@' -f2)
          
          # Extract port (optional, defaults to 22)
          if echo "$USERHOST" | grep -q ':'; then
            # Port is specified
            PORT_PATH=$(echo "$USERHOST" | sed 's/^[^:]*://')
            if echo "$PORT_PATH" | grep -q '/'; then
              SSH_PORT=$(echo "$PORT_PATH" | cut -d'/' -f1)
            else
              SSH_PORT="$PORT_PATH"
            fi
          else
            SSH_PORT="22"
          fi
          
          # Extract project path (optional, defaults to /var/www/html)
          if echo "$USERHOST" | grep -q '/'; then
            PROJECT_PATH="/$(echo "$USERHOST" | sed 's/^[^/]*\///')"
          else
            PROJECT_PATH="/var/www/html"
          fi
          
          echo "Parsed components:"
          echo "SSH_USER: $SSH_USER"
          echo "SSH_HOST: $SSH_HOST" 
          echo "SSH_PORT: $SSH_PORT"
          echo "PROJECT_PATH: $PROJECT_PATH"
          
          # Export as outputs
          echo "ssh_user=$SSH_USER" >> $GITHUB_OUTPUT
          echo "ssh_host=$SSH_HOST" >> $GITHUB_OUTPUT
          echo "ssh_port=$SSH_PORT" >> $GITHUB_OUTPUT
          echo "project_path=$PROJECT_PATH" >> $GITHUB_OUTPUT

      - name: Deploy to Server via SSH
        id: deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.parse_userhost.outputs.ssh_host }}
          username: ${{ steps.parse_userhost.outputs.ssh_user }}
          key: ${{ secrets.SSHPRIVATE }}
          port: ${{ steps.parse_userhost.outputs.ssh_port }}
          script: |
            set -e  # Exit on any error
            
            # Set deployment status to failed initially
            DEPLOYMENT_STATUS="failure"
            
            # Navigate to project directory
            PROJECT_PATH="${{ steps.parse_userhost.outputs.project_path }}"
            echo "Navigating to project directory: $PROJECT_PATH"
            cd "$PROJECT_PATH"

            # Show current status
            echo "=== Current Git Status ==="
            git status
            echo "=========================="

            # Fetch latest changes
            echo "Fetching latest changes..."
            git fetch origin

            # Switch to target branch and pull
            BRANCH="${{ inputs.branch }}"
            echo "Switching to branch: $BRANCH"
            git checkout "$BRANCH"
            git pull origin "$BRANCH"

            # Show what changed
            echo "=== Latest Commits ==="
            git log --oneline -5
            echo "====================="

            # Run post-pull commands if requested
            POST_COMMANDS_RUN="false"
            if [ "${{ inputs.run_post_commands }}" = "true" ]; then
              echo "Running post-pull commands..."
              POST_COMMANDS_RUN="true"

              # Run custom post commands if provided
              CUSTOM_COMMANDS="${{ inputs.post_commands }}"
              if [ -n "$CUSTOM_COMMANDS" ]; then
                echo "Executing custom post-pull commands:"
                echo "$CUSTOM_COMMANDS"
                echo "======================================"
                
                # Execute the custom commands
                echo "$CUSTOM_COMMANDS" | while IFS= read -r cmd; do
                  if [ -n "$cmd" ]; then
                    echo "Running: $cmd"
                    eval "$cmd"
                  fi
                done
              else
                echo "No custom post-pull commands specified."
              fi

              echo "Post-pull commands completed."
            else
              echo "Skipping post-pull commands."
            fi

            # If we get here, deployment was successful
            DEPLOYMENT_STATUS="success"
            
            echo "=== Deployment completed successfully! ==="
            
            # Export outputs for GitHub Actions
            echo "deployment_status=$DEPLOYMENT_STATUS" >> $GITHUB_OUTPUT
            echo "branch_deployed=$BRANCH" >> $GITHUB_OUTPUT
            echo "post_commands_run=$POST_COMMANDS_RUN" >> $GITHUB_OUTPUT
            
      - name: Set step outputs
        if: always()
        run: |
          # Ensure outputs are set even if the SSH action fails
          if [ -z "${{ steps.deploy.outputs.deployment_status }}" ]; then
            echo "deployment_status=failure" >> $GITHUB_OUTPUT
            echo "branch_deployed=${{ inputs.branch }}" >> $GITHUB_OUTPUT
            echo "post_commands_run=false" >> $GITHUB_OUTPUT
          fi