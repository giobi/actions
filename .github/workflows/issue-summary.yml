name: Generate Activity Summary

"on":
  workflow_call:
    inputs:
      days:
        description: "Number of days to look back for closed issues and PRs"
        required: false
        default: "7"
        type: string
      language:
        description: "Language for the summary (italian, english)"
        required: false
        default: "italian"
        type: string
      label:
        description: "Label to apply to the created summary issue"
        required: false
        default: "TOPIC"
        type: string
    secrets:
      OPENROUTER_API_KEY:
        description: "OpenRouter API key for AI summary generation"
        required: true
    outputs:
      issue_number:
        description: "Number of the created summary issue"
        value: ${{ jobs.generate-summary.outputs.issue_number }}
      issue_url:
        description: "URL of the created summary issue"
        value: ${{ jobs.generate-summary.outputs.issue_url }}
      issues_count:
        description: "Number of closed issues found"
        value: ${{ jobs.generate-summary.outputs.issues_count }}
      pull_requests_count:
        description: "Number of closed pull requests found"
        value: ${{ jobs.generate-summary.outputs.pull_requests_count }}

jobs:
  generate-summary:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
      pull-requests: read
    outputs:
      issue_number: ${{ steps.generate-activity-summary.outputs.issue_number }}
      issue_url: ${{ steps.generate-activity-summary.outputs.issue_url }}
      issues_count: ${{ steps.generate-activity-summary.outputs.issues_count }}
      pull_requests_count: ${{ steps.generate-activity-summary.outputs.pull_requests_count }}

    steps:
      - name: Generate Activity Summary
        id: generate-activity-summary
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            // Use workflow input for days, with fallback to default
            const daysBack = parseInt('${{ inputs.days }}');
            
            // Calculate date threshold
            const dateThreshold = new Date();
            dateThreshold.setDate(dateThreshold.getDate() - daysBack);
            const since = dateThreshold.toISOString();
            
            console.log(`Looking for activity since: ${since} (${daysBack} days ago)`);
            
            // Fetch closed issues
            console.log('Fetching closed issues...');
            const { data: issues } = await github.rest.issues.listForRepo({
              owner,
              repo,
              state: 'closed',
              since,
              per_page: 100,
              sort: 'updated',
              direction: 'desc'
            });
            
            // Filter out pull requests from issues (GitHub API returns both)
            const actualIssues = issues.filter(issue => !issue.pull_request);
            
            // Fetch closed pull requests
            console.log('Fetching closed pull requests...');
            const { data: pullRequests } = await github.rest.pulls.list({
              owner,
              repo,
              state: 'closed',
              sort: 'updated',
              direction: 'desc',
              per_page: 100
            });
            
            // Filter PRs that were closed in the time range
            const recentPRs = pullRequests.filter(pr => 
              new Date(pr.closed_at) >= dateThreshold
            );
            
            console.log(`Found ${actualIssues.length} closed issues and ${recentPRs.length} closed PRs`);
            
            // Prepare data for AI summarization
            const activityData = {
              timeRange: `${daysBack} days`,
              since: since,
              issues: actualIssues.map(issue => ({
                number: issue.number,
                title: issue.title,
                labels: issue.labels.map(label => label.name),
                closed_at: issue.closed_at,
                user: issue.user.login,
                body: issue.body ? issue.body.substring(0, 500) : '' // Limit body length
              })),
              pullRequests: recentPRs.map(pr => ({
                number: pr.number,
                title: pr.title,
                labels: pr.labels.map(label => label.name),
                closed_at: pr.closed_at,
                merged_at: pr.merged_at,
                user: pr.user.login,
                merged: pr.merged,
                body: pr.body ? pr.body.substring(0, 500) : '' // Limit body length
              }))
            };
            
            // Get language preference
            const language = '${{ inputs.language }}' || 'italian';
            
            // Create prompt for AI summarization based on language
            let promptParts = [];
            if (language === 'italian') {
              promptParts = [
                'Genera un riassunto completo delle attività del repository GitHub degli ultimi ' + daysBack + ' giorni in ITALIANO.',
                'Il riassunto deve essere strutturato in due parti principali:',
                '',
                '**PARTE 1 - TOP 10 DELLE ATTIVITÀ PRINCIPALI**',
                'Elenca e spiega in modo semplice e comprensibile le 10 attività più importanti realizzate (issues chiuse e pull request). Usa un linguaggio accessibile, evita tecnicismi eccessivi.',
                '',
                '**PARTE 2 - DETTAGLI TECNICI**',
                'Fornisci una sezione più tecnica e dettagliata con:',
                '- Analisi approfondita dei cambiamenti',
                '- Dettagli implementativi',
                '- Tendenze e pattern identificati',
                '- Aree di focus del team',
                '- Considerazioni tecniche rilevanti',
                '',
                '**DATI DELLE ATTIVITÀ:**',
                '',
                '**Issues Chiuse (' + actualIssues.length + '):**',
                actualIssues.map(issue => '- #' + issue.number + ': ' + issue.title + ' (chiusa da ' + issue.user.login + ')').join('\\n'),
                '',
                '**Pull Request Chiuse (' + recentPRs.length + '):**',
                recentPRs.map(pr => '- #' + pr.number + ': ' + pr.title + ' (' + (pr.merged ? 'merged' : 'chiusa') + ' da ' + pr.user.login + ')').join('\\n'),
                '',
                'IMPORTANTE:',
                '- Scrivi TUTTO in italiano',
                '- Mantieni un tono professionale ma accessibile',
                '- Usa il formato markdown per la formattazione',
                '- Se non ci sono attività sufficienti per 10 punti, elenca quelle disponibili',
                '- La parte tecnica può essere più lunga e dettagliata della parte semplice'
              ];
            } else {
              promptParts = [
                'Generate a comprehensive summary of GitHub repository activities for the last ' + daysBack + ' days in ENGLISH.',
                'The summary should be structured in two main parts:',
                '',
                '**PART 1 - TOP 10 MAIN ACTIVITIES**',
                'List and explain in simple and understandable terms the 10 most important activities completed (closed issues and pull requests). Use accessible language, avoid excessive technical jargon.',
                '',
                '**PART 2 - TECHNICAL DETAILS**',
                'Provide a more technical and detailed section with:',
                '- In-depth analysis of changes',
                '- Implementation details',
                '- Identified trends and patterns',
                '- Team focus areas',
                '- Relevant technical considerations',
                '',
                '**ACTIVITY DATA:**',
                '',
                '**Closed Issues (' + actualIssues.length + '):**',
                actualIssues.map(issue => '- #' + issue.number + ': ' + issue.title + ' (closed by ' + issue.user.login + ')').join('\\n'),
                '',
                '**Closed Pull Requests (' + recentPRs.length + '):**',
                recentPRs.map(pr => '- #' + pr.number + ': ' + pr.title + ' (' + (pr.merged ? 'merged' : 'closed') + ' by ' + pr.user.login + ')').join('\\n'),
                '',
                'IMPORTANT:',
                '- Write everything in English',
                '- Maintain a professional but accessible tone',
                '- Use markdown format for formatting',
                '- If there are not enough activities for 10 points, list those available',
                '- The technical part can be longer and more detailed than the simple part'
              ];
            }
            const prompt = promptParts.join('\\n');

            console.log('Calling OpenRouter API for summarization...');
            
            // Call OpenRouter API
            let summaryContent = '';
            try {
              const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
                method: 'POST',
                headers: {
                  'Authorization': `Bearer ${{ secrets.OPENROUTER_API_KEY }}`,
                  'Content-Type': 'application/json',
                  'HTTP-Referer': 'https://github.com',
                  'X-Title': 'Repository Activity Summary'
                },
                body: JSON.stringify({
                  model: 'anthropic/claude-3-haiku',
                  messages: [
                    {
                      role: 'user',
                      content: prompt
                    }
                  ],
                  max_tokens: 1000,
                  temperature: 0.3
                })
              });
              
              if (!response.ok) {
                throw new Error(`OpenRouter API failed: ${response.status} ${response.statusText}`);
              }
              
              const result = await response.json();
              summaryContent = result.choices[0].message.content;
              
              console.log('AI summary generated successfully');
              
            } catch (error) {
              console.error('Failed to generate AI summary:', error);
              
              // Fallback to manual summary if AI fails
              const fallbackParts = language === 'italian' ? [
                '## Riassunto Attività Repository - Ultimi ' + daysBack + ' Giorni',
                '',
                '### Panoramica',
                'Questo è un riassunto automatico delle attività del repository dal ' + new Date(since).toLocaleDateString('it-IT') + ' al ' + new Date().toLocaleDateString('it-IT') + '.',
                '',
                '### Issues Chiuse (' + actualIssues.length + ')',
                actualIssues.length > 0 ? actualIssues.map(issue => '- #' + issue.number + ': ' + issue.title).join('\\n') : 'Nessuna issue chiusa in questo periodo.',
                '',
                '### Pull Request Chiuse (' + recentPRs.length + ')',
                recentPRs.length > 0 ? recentPRs.map(pr => '- #' + pr.number + ': ' + pr.title + ' (' + (pr.merged ? 'merged' : 'chiusa') + ')').join('\\n') : 'Nessuna pull request chiusa in questo periodo.',
                '',
                '*Nota: La generazione automatica del riassunto è fallita, vengono mostrati i dati grezzi.*'
              ] : [
                '## Repository Activity Summary - Last ' + daysBack + ' Days',
                '',
                '### Overview',
                'This is an automatic summary of repository activities from ' + new Date(since).toLocaleDateString('en-US') + ' to ' + new Date().toLocaleDateString('en-US') + '.',
                '',
                '### Closed Issues (' + actualIssues.length + ')',
                actualIssues.length > 0 ? actualIssues.map(issue => '- #' + issue.number + ': ' + issue.title).join('\\n') : 'No issues closed in this period.',
                '',
                '### Closed Pull Requests (' + recentPRs.length + ')',
                recentPRs.length > 0 ? recentPRs.map(pr => '- #' + pr.number + ': ' + pr.title + ' (' + (pr.merged ? 'merged' : 'closed') + ')').join('\\n') : 'No pull requests closed in this period.',
                '',
                '*Note: Automatic summary generation failed, showing raw data.*'
              ];
              summaryContent = fallbackParts.join('\\n');
            }
            
            // Create the summary issue
            const issueTitle = language === 'italian' ? 
              '[RIASSUNTO] - ultimi ' + daysBack + ' giorni' : 
              '[SUMMARY] - last ' + daysBack + ' days';
            
            const issueBodyParts = [
              summaryContent,
              '',
              '---',
              '',
              language === 'italian' ? '**Dettagli Riassunto Automatico:**' : '**Automatic Summary Details:**',
              language === 'italian' ? 
                '- **Periodo:** ' + new Date(since).toLocaleDateString('it-IT') + ' - ' + new Date().toLocaleDateString('it-IT') :
                '- **Period:** ' + new Date(since).toLocaleDateString('en-US') + ' - ' + new Date().toLocaleDateString('en-US'),
              language === 'italian' ? 
                '- **Issues Chiuse:** ' + actualIssues.length :
                '- **Closed Issues:** ' + actualIssues.length,
              language === 'italian' ? 
                '- **Pull Request Chiuse:** ' + recentPRs.length :
                '- **Closed Pull Requests:** ' + recentPRs.length,
              language === 'italian' ? 
                '- **Generato:** ' + new Date().toLocaleString('it-IT') :
                '- **Generated:** ' + new Date().toLocaleString('en-US'),
              '',
              language === 'italian' ? 
                '*Questo riassunto è stato generato automaticamente dal workflow Activity Summary.*' :
                '*This summary was automatically generated by the Activity Summary workflow.*'
            ];
            const issueBody = issueBodyParts.join('\\n');

            console.log('Creating summary issue...');
            
            const newIssue = await github.rest.issues.create({
              owner,
              repo,
              title: issueTitle,
              body: issueBody,
              labels: ['${{ inputs.label }}']
            });
            
            console.log(`Summary issue created: #${newIssue.data.number}`);
            console.log(`URL: ${newIssue.data.html_url}`);
            
            // Set outputs
            core.setOutput('issue_number', newIssue.data.number);
            core.setOutput('issue_url', newIssue.data.html_url);
            core.setOutput('issues_count', actualIssues.length);
            core.setOutput('pull_requests_count', recentPRs.length);
            
            // Return result for logging
            return {
              issueNumber: newIssue.data.number,
              issueUrl: newIssue.data.html_url,
              issuesCount: actualIssues.length,
              pullRequestsCount: recentPRs.length
            };
