name: Generate Activity Summary

"on":
  schedule:
    # Run every Monday at 8:00 AM UTC
    - cron: "0 8 * * 1"
  workflow_dispatch:
    inputs:
      days:
        description: "Number of days to look back for closed issues and PRs"
        required: true
        default: "7"
        type: string

jobs:
  generate-summary:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
      pull-requests: read

    steps:
      - name: Generate Activity Summary
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            // For scheduled runs, use 7 days; for manual runs, use the input
            const daysBack = context.eventName === 'schedule' ? 7 : parseInt('${{ github.event.inputs.days }}');
            
            // Calculate date threshold
            const dateThreshold = new Date();
            dateThreshold.setDate(dateThreshold.getDate() - daysBack);
            const since = dateThreshold.toISOString();
            
            console.log(`Looking for activity since: ${since} (${daysBack} days ago)`);
            
            // Fetch closed issues
            console.log('Fetching closed issues...');
            const { data: issues } = await github.rest.issues.listForRepo({
              owner,
              repo,
              state: 'closed',
              since,
              per_page: 100,
              sort: 'updated',
              direction: 'desc'
            });
            
            // Filter out pull requests from issues (GitHub API returns both)
            const actualIssues = issues.filter(issue => !issue.pull_request);
            
            // Fetch closed pull requests
            console.log('Fetching closed pull requests...');
            const { data: pullRequests } = await github.rest.pulls.list({
              owner,
              repo,
              state: 'closed',
              sort: 'updated',
              direction: 'desc',
              per_page: 100
            });
            
            // Filter PRs that were closed in the time range
            const recentPRs = pullRequests.filter(pr => 
              new Date(pr.closed_at) >= dateThreshold
            );
            
            console.log(`Found ${actualIssues.length} closed issues and ${recentPRs.length} closed PRs`);
            
            // Prepare data for AI summarization
            const activityData = {
              timeRange: `${daysBack} days`,
              since: since,
              issues: actualIssues.map(issue => ({
                number: issue.number,
                title: issue.title,
                labels: issue.labels.map(label => label.name),
                closed_at: issue.closed_at,
                user: issue.user.login,
                body: issue.body ? issue.body.substring(0, 500) : '' // Limit body length
              })),
              pullRequests: recentPRs.map(pr => ({
                number: pr.number,
                title: pr.title,
                labels: pr.labels.map(label => label.name),
                closed_at: pr.closed_at,
                merged_at: pr.merged_at,
                user: pr.user.login,
                merged: pr.merged,
                body: pr.body ? pr.body.substring(0, 500) : '' // Limit body length
              }))
            };
            
            // Create prompt for AI summarization in Italian
            const promptParts = [
              'Genera un riassunto completo delle attività del repository GitHub degli ultimi ' + daysBack + ' giorni in ITALIANO.',
              'Il riassunto deve essere strutturato in due parti principali:',
              '',
              '**PARTE 1 - TOP 10 DELLE ATTIVITÀ PRINCIPALI**',
              'Elenca e spiega in modo semplice e comprensibile le 10 attività più importanti realizzate (issues chiuse e pull request). Usa un linguaggio accessibile, evita tecnicismi eccessivi.',
              '',
              '**PARTE 2 - DETTAGLI TECNICI**',
              'Fornisci una sezione più tecnica e dettagliata con:',
              '- Analisi approfondita dei cambiamenti',
              '- Dettagli implementativi',
              '- Tendenze e pattern identificati',
              '- Aree di focus del team',
              '- Considerazioni tecniche rilevanti',
              '',
              '**DATI DELLE ATTIVITÀ:**',
              '',
              '**Issues Chiuse (' + actualIssues.length + '):**',
              actualIssues.map(issue => '- #' + issue.number + ': ' + issue.title + ' (chiusa da ' + issue.user.login + ')').join('\\n'),
              '',
              '**Pull Request Chiuse (' + recentPRs.length + '):**',
              recentPRs.map(pr => '- #' + pr.number + ': ' + pr.title + ' (' + (pr.merged ? 'merged' : 'chiusa') + ' da ' + pr.user.login + ')').join('\\n'),
              '',
              'IMPORTANTE:',
              '- Scrivi TUTTO in italiano',
              '- Mantieni un tono professionale ma accessibile',
              '- Usa il formato markdown per la formattazione',
              '- Se non ci sono attività sufficienti per 10 punti, elenca quelle disponibili',
              '- La parte tecnica può essere più lunga e dettagliata della parte semplice'
            ];
            const prompt = promptParts.join('\\n');

            console.log('Calling OpenRouter API for summarization...');
            
            // Call OpenRouter API
            let summaryContent = '';
            try {
              const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
                method: 'POST',
                headers: {
                  'Authorization': `Bearer ${{ secrets.OPENROUTER_API_KEY }}`,
                  'Content-Type': 'application/json',
                  'HTTP-Referer': 'https://github.com',
                  'X-Title': 'A3D Repository Activity Summary'
                },
                body: JSON.stringify({
                  model: 'anthropic/claude-3-haiku',
                  messages: [
                    {
                      role: 'user',
                      content: prompt
                    }
                  ],
                  max_tokens: 1000,
                  temperature: 0.3
                })
              });
              
              if (!response.ok) {
                throw new Error(`OpenRouter API failed: ${response.status} ${response.statusText}`);
              }
              
              const result = await response.json();
              summaryContent = result.choices[0].message.content;
              
              console.log('AI summary generated successfully');
              
            } catch (error) {
              console.error('Failed to generate AI summary:', error);
              
              // Fallback to manual summary if AI fails
              const fallbackParts = [
                '## Riassunto Attività Repository - Ultimi ' + daysBack + ' Giorni',
                '',
                '### Panoramica',
                'Questo è un riassunto automatico delle attività del repository dal ' + new Date(since).toLocaleDateString('it-IT') + ' al ' + new Date().toLocaleDateString('it-IT') + '.',
                '',
                '### Issues Chiuse (' + actualIssues.length + ')',
                actualIssues.length > 0 ? actualIssues.map(issue => '- #' + issue.number + ': ' + issue.title).join('\\n') : 'Nessuna issue chiusa in questo periodo.',
                '',
                '### Pull Request Chiuse (' + recentPRs.length + ')',
                recentPRs.length > 0 ? recentPRs.map(pr => '- #' + pr.number + ': ' + pr.title + ' (' + (pr.merged ? 'merged' : 'chiusa') + ')').join('\\n') : 'Nessuna pull request chiusa in questo periodo.',
                '',
                '*Nota: La generazione automatica del riassunto è fallita, vengono mostrati i dati grezzi.*'
              ];
              summaryContent = fallbackParts.join('\\n');
            }
            
            // Create the summary issue
            const issueTitle = '[RIASSUNTO] - ultimi ' + daysBack + ' giorni';
            const issueBodyParts = [
              summaryContent,
              '',
              '---',
              '',
              '**Dettagli Riassunto Automatico:**',
              '- **Periodo:** ' + new Date(since).toLocaleDateString('it-IT') + ' - ' + new Date().toLocaleDateString('it-IT'),
              '- **Issues Chiuse:** ' + actualIssues.length,
              '- **Pull Request Chiuse:** ' + recentPRs.length,
              '- **Generato:** ' + new Date().toLocaleString('it-IT'),
              '',
              '*Questo riassunto è stato generato automaticamente dal workflow Activity Summary.*'
            ];
            const issueBody = issueBodyParts.join('\\n');

            console.log('Creating summary issue...');
            
            const newIssue = await github.rest.issues.create({
              owner,
              repo,
              title: issueTitle,
              body: issueBody,
              labels: ['TOPIC']
            });
            
            console.log(`Summary issue created: #${newIssue.data.number}`);
            console.log(`URL: ${newIssue.data.html_url}`);
            
            // Set output for potential further processing
            return {
              issueNumber: newIssue.data.number,
              issueUrl: newIssue.data.html_url,
              issuesCount: actualIssues.length,
              pullRequestsCount: recentPRs.length
            };
